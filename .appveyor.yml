environment:
  global:
    PROJECT_SPEC: "cmarkgfm==0.4.2"
    PACKAGE_NAME: "cmarkgfm"
    BUILD_DEP: "wheel cffi"
    TEST_DEP: "pytest"

    # Configuration for PyPI
    TWINE_USERNAME:
        secure: I/mthkSjVPkEXaX1ESWEKQ==
    TWINE_PASSWORD:
        secure: lNPm9GxVvzb3h0SeaDiFYg==

    # Configuration for TestPyPI
    # TWINE_USERNAME:
    #   secure: 6shR/E4TjJZGjlLh2FLMcg==
    # TWINE_PASSWORD:
    #   secure: 6t7jX/7mfyee2ZhO7rI1+g==
    # # Use TestPyPI
    # TWINE_REPOSITORY_URL: "https://test.pypi.org/legacy/"

  matrix:
    - PYTHON: C:\Python27
    - PYTHON: C:\Python27-x64
    - PYTHON: C:\Python35
    - PYTHON: C:\Python35-x64
    - PYTHON: C:\Python36
    - PYTHON: C:\Python36-x64
    - PYTHON: C:\Python37
    - PYTHON: C:\Python37-x64
    - PYTHON: C:\Python34
    - PYTHON: C:\Python34-x64


matrix:
    fast_finish: true

install:
    # Fetch submodules
    - git submodule update --init --recursive
    # Prepend newly installed Python to the PATH of this build (this cannot be
    # done from inside the powershell script as it would require to restart
    # the parent CMD process).
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
    - python -m pip install -U pip

    # Fix MSVC builds for 64-bit Python. See:
    # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
    - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

    # Install the mingw compiler, but only if we're on Python 2.7 or 3.4
    - pip install --no-cache-dir --pre --index https://pypi.anaconda.org/carlkl/simple "mingwpy; python_version < '3.5'"

build_script:
    # Install the dependencies of the project.
    - python -m pip install %BUILD_DEP%
    # Build wheel
    - python -m pip wheel -v --no-cache-dir --wheel-dir=wheelhouse --no-binary=%PACKAGE_NAME% %PROJECT_SPEC% %EXTRA_BUILD_OPTIONS%
    - dir /s /b wheelhouse

test_script:
    # create test env
    - virtualenv --python %PYTHON%\Python.exe test_env
    - test_env\Scripts\python -m pip install %TEST_DEP%

    # install from wheel
    - test_env\Scripts\python -m pip install --pre --no-index --find-links=wheelhouse %PACKAGE_NAME%

    # Change into an innocuous directory and find tests from installation
    - mkdir for_testing
    - cd for_testing
    - test_env\Scripts\python --version
    - test_env\Scripts\python -c "import %PACKAGE_NAME%;"
    - cd ..

artifacts:
    - path: wheelhouse

on_success:
  # Upload the generated wheel package to PyPI.
  - pip install requests[security] twine
  - twine upload --skip-existing wheelhouse\%PACKAGE_NAME%*.whl

cache:
  # Use the appveyor cache to avoid re-downloading large archives.
  - '%APPDATA%\pip\Cache'
